---
import type { MenuItemDefinition } from '../utils/menu-item-definition';
import type { NavBarSettings } from '../utils/nav-bar-settings';
import Hamburger from './Hamburger.astro';
import MainMenu from './MainMenu.astro';

export interface Props {
    // class: string;
    settings: NavBarSettings;
    menuItemDefinitions: readonly MenuItemDefinition[];
    // rest?: unknown;
};

const { settings, menuItemDefinitions } = Astro.props;
// const { class: className, settings, menuItemDefinitions, ...rest } = Astro.props;
// <nav class:list={['navbar', className]} {...rest}>
---

<nav class="navbar">
    <div class="navbar-narrow-left-slot">
        <slot name="narrow-left" />
    </div>

    <div class="navbar-wide-left-slot">
        <slot name="wide-left" />
    </div>

    <MainMenu settings={settings}, menuItemDefinitions={menuItemDefinitions} />
    <div class="narrow-heading-slot">
        <slot name="narrow-heading" />
    </div>

    <div class="navbar-wide-right-slot">
        <slot name="wide-right" />
    </div>
    <Hamburger settings={settings} />
</nav>

<style define:vars={{
    navBarBackgroundColor: settings.navBarBackgroundColor,
    navBarMargin: settings.navBarMargin,
    navBarPadding: settings.navBarPadding,
    navBarWideLeftSlotFlex: settings.navBarWideLeftSlotFlex,
    navBarWideRightSlotFlex: settings.navBarWideRightSlotFlex,
}}>
    .navbar {
        width: 100%;
        position: relative;
        background-color: var(--navBarBackgroundColor, #d0dae0);
        margin: var(--navBarMargin, 0);
        padding: var(--navBarPadding, 0);
        display: flex;
        align-items: center;
        justify-content: space-between;

        > .narrow-heading-slot {
            display: none;
        }

        > .navbar-narrow-left-slot {
            display: none;
        }

        > .navbar-wide-left-slot {
            display: flex;
            align-items: center;
            flex: var(--navBarWideLeftSlotFlex, 0 0 auto);
        }

        > .navbar-wide-right-slot {
            display: flex;
            align-items: center;
            flex: var(--navBarWideRightSlotFlex, 0 0 auto);
        }

        /* Make sure lines up with @media in MainMenu and BranchMenuItem */
    }

    @media screen and (width < 32rem) {
        .navbar {
            > .narrow-heading-slot {
                display: flex;
                align-items: center;
            }

            > .navbar-narrow-left-slot {
                display: flex;
                align-items: center;
            }

            > .navbar-wide-left-slot {
                display: none;
            }

            > .navbar-wide-right-slot {
                display: none;
            }

            > .hamburger {
                display: block;
                pointer-events: all;
            }

            /* moved here as currently not possible to set @media rules parameters so less places to update */
            > .main-menu {
                position: absolute;
                top: 100%;
                display: none;
                flex-direction: column;
                gap: var(--narrowMainMenuFlexGap, 0.18rem);
                box-shadow: var(--narrowMainMenuBoxShadow, 0 .1rem .4rem black);

                &.active {
                    display: flex;
                    width: 100%;
                }

                > .leaf-menu-item {
                    padding: var(--narrowMenuItemPadding, 0 0.2rem 0 0.7rem);
                }
            }
        }
    }
</style>

<script>
    //import '../scripts/menu-setup';

    const hamburgerIcon = document.querySelector('.hamburger');
    if (hamburgerIcon === null) {
        throw new Error('Hamburger Icon not found');
    } else {
        const mainMenuComponent = document.querySelector('.main-menu');
        if (mainMenuComponent === null) {
            throw new Error('MainMenu Component not found');
        } else {
            const menuComboElementList = mainMenuComponent.querySelectorAll('.branch-menu-item');

            const menuComboDroppedClassName = 'dropped';
            menuComboElementList.forEach((element) => {
                const upDownMenuItemClickElement = element.querySelector('.up-down-menu-item-click');
                if (upDownMenuItemClickElement === null) {
                    throw new Error(`UpDownMenuItemClick element for "${element.innerHTML}" not found`);
                } else {
                    upDownMenuItemClickElement.addEventListener('click', () => {
                        element.classList.toggle(menuComboDroppedClassName);
                    });
                }
            });

            hamburgerIcon.addEventListener('click', () => {
                hamburgerIcon.classList.toggle('active');
                const mainMenuComponentActiveClassName = 'active';
                if (mainMenuComponent.classList.contains(mainMenuComponentActiveClassName)) {
                    menuComboElementList.forEach((element) => {
                        element.classList.remove(menuComboDroppedClassName);
                    });
                    mainMenuComponent.classList.remove(mainMenuComponentActiveClassName);
                } else {
                    mainMenuComponent.classList.add(mainMenuComponentActiveClassName);
                }
            });
        }
    }
</script>
